// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3668.TroBots.subSystems;

import org.usfirst.frc3668.TroBots.RobotMap;
import org.usfirst.frc3668.TroBots.Settings;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.command.Subsystem;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class SubClimb extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX climb1 = RobotMap.climb1;
    private final WPI_TalonSRX climb2 = RobotMap.climb2;
    private final SpeedControllerGroup climbController = RobotMap.climbController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public void climbFixedSpeed() {
		
		RobotMap.climb1.set(Settings.climbMotorSpeed);
		RobotMap.climb2.set(Settings.climbMotorSpeed);

	}
	public void joyClimb(Joystick joy){
		double motorSpeed = (1 - joy.getY());
		
		RobotMap.climb1.set(Math.abs(joy.getY()));
		RobotMap.climb2.set(Math.abs(joy.getY()));
	}
public void StopClimb() {
		
		RobotMap.climb1.set(0);
		RobotMap.climb2.set(0);

	}
public void initDefaultCommand() {
    // Set the default command for a subsystem here.
    //setDefaultCommand(new MySpecialCommand());
}














   
   
    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

