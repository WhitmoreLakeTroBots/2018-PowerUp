// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3668.TroBots.subSystems;

import org.usfirst.frc3668.TroBots.Robot;
import org.usfirst.frc3668.TroBots.RobotMap;
import org.usfirst.frc3668.TroBots.Settings;
import org.usfirst.frc3668.TroBots.commands.TeleopDrive;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class SubChassis extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private final WPI_TalonSRX rightDrive1 = RobotMap.rightDrive1;
	private final WPI_TalonSRX rightDrive2 = RobotMap.rightDrive2;
	private final SpeedControllerGroup rightChassisMotors = RobotMap.rightChassisMotors;
	private final WPI_TalonSRX leftDrive1 = RobotMap.leftDrive1;
	private final WPI_TalonSRX leftDrive2 = RobotMap.leftDrive2;
	private final SpeedControllerGroup leftChassisMotors = RobotMap.leftChassisMotors;
	private final DifferentialDrive differentialDrive1 = RobotMap.chassisDrive;
	private final AnalogGyro gyro = RobotMap.gyro;
	private final Ultrasonic leftSonar = RobotMap.leftSonar;
	private final Ultrasonic rightSonar = RobotMap.rightSonar;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public void Drive(Joystick stick) {
		double joyX = stick.getX();
		double joyY = stick.getY();
		if (Robot.isDriveInverted) {
			RobotMap.chassisDrive.arcadeDrive(-joyY, -joyX, true);
		}
		if (!Robot.isDriveInverted) {
			RobotMap.chassisDrive.arcadeDrive(joyY, -joyX, true);
		}
	}

	public void DriveMan(double leftThrottle, double rightThrottle) {
		RobotMap.leftDrive1.set(leftThrottle);
		RobotMap.leftDrive2.set(leftThrottle);
		RobotMap.rightDrive1.set(-rightThrottle);
		RobotMap.rightDrive2.set(-rightThrottle);
	}

	public void Drive(double move, double rotate) {
		RobotMap.chassisDrive.arcadeDrive(move, rotate);
	}

	public double getEncoderAvgDistInch() {
		double retVal = 0;
		double leftDistance = RobotMap.leftDrive1.getSelectedSensorPosition(0);
		double rightDistance = RobotMap.rightDrive1.getSelectedSensorPosition(0);
		if(leftDistance < Settings.chassisEncoderDeadValueThreshold){
			retVal = rightDistance;
		} else if (rightDistance < Settings.chassisEncoderDeadValueThreshold){
			retVal = leftDistance;
		} else {
			retVal = (leftDistance + rightDistance) / 2;
		}
		return retVal;
	}

	public double getRightEncoderDist () {
		return RobotMap.rightDrive1.getSelectedSensorPosition(0);
	}
	@Override
	public void initDefaultCommand() {
		 //setDefaultCommand(new TeleopDrive());
	}

	@Override
	public void periodic() {
		// Put code here to be run every loop

	}

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

}
